{"version":3,"sources":["config/config.js","components/navBar/NavBar.js","components/Search.js","components/Map.js","components/SearchResults.js","components/App.js","serviceWorker.js","index.js"],"names":["IPDATA_KEY","NavBar","Menu","inverted","fixed","size","Container","Item","header","src","alt","Search","handleOnClick","loading","style","marginTop","Header","marginBottom","Button","color","onClick","Map","location","handleOnLoad","width","height","frameBorder","border","latitude","longitude","allowFullScreen","title","onLoad","SearchResults","useState","ready","setReady","city","country","App","state","showResults","error","findLocation","a","setState","axios","get","response","data","country_name","console","log","this","textAlign","Segment","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"kWAAaA,EAAa,2D,SCiBXC,G,OAbA,WACb,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAAMC,KAAK,WAC9B,kBAACC,EAAA,EAAD,KACE,kBAACJ,EAAA,EAAKK,KAAN,CAAWC,QAAM,GACf,yBAAKC,IAAI,kBAAkBC,IAAI,SADjC,mB,SCaOC,EAlBA,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,cAAeC,EAAc,EAAdA,QAC/B,OACE,yBAAKC,MAAO,CAAEC,UAAW,QACvB,kBAACC,EAAA,EAAD,CAAQF,MAAO,CAAEG,aAAc,QAA/B,2CAGA,kBAACC,EAAA,EAAD,CACEC,MAAM,QACNd,KAAK,MACLe,QAAS,kBAAMR,KACfC,QAASA,GAJX,U,SCYSQ,EAlBH,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aACvB,OACE,4BACEC,MAAM,MACNC,OAAO,MACPC,YAAY,IACZZ,MAAO,CAAEa,OAAQ,EAAGZ,UAAW,OAG/BN,IAAG,yDHVqB,0CGUrB,0BACMa,EAASM,SADf,YAC2BN,EAASO,WACvCC,iBAAe,EACfC,MAAM,WACNC,OAAQ,kBAAMT,GAAa,OCElBU,EAdO,SAAC,GAAkB,IAAhBX,EAAe,EAAfA,SAAe,EACZY,oBAAS,GADG,mBAC/BC,EAD+B,KACxBC,EADwB,KAItC,OACE,yBAAKtB,MAAO,CAAEC,UAAW,QACtBoB,GACC,kBAACnB,EAAA,EAAD,yBAAsBM,EAASe,KAA/B,aAAwCf,EAASgB,UAEnD,kBAAC,EAAD,CAAKhB,SAAUA,EAAUC,aAAca,MCoD9BG,E,2MAxDbC,MAAQ,CACNlB,SAAU,GACVmB,aAAa,EACb5B,SAAS,EACT6B,OAAO,G,EAGTC,a,sBAAe,8BAAAC,EAAA,6DACb,EAAKC,SAAS,CAAEJ,aAAa,EAAO5B,SAAS,EAAM6B,OAAO,IAD7C,kBAGUI,IAAMC,IAAN,wCAEc/C,IALxB,OAGPgD,EAHO,OAQPC,EAAOD,EAASC,KAEpB,EAAKJ,SAAS,CACZvB,SAAU,CACRM,SAAUqB,EAAKrB,SACfC,UAAWoB,EAAKpB,UAChBQ,KAAMY,EAAKZ,KACXC,QAASW,EAAKC,cAEhBT,aAAa,EACb5B,SAAS,IAlBA,gDAqBXsC,QAAQC,IAAI,KAAMJ,UAClB,EAAKH,SAAS,CAAEJ,aAAa,EAAO5B,SAAS,EAAO6B,OAAO,IAtBhD,yD,wEA0BL,IAAD,EAC2CW,KAAKb,MAA/CE,EADD,EACCA,MAAOD,EADR,EACQA,YAAa5B,EADrB,EACqBA,QAASS,EAD9B,EAC8BA,SAErC,OACE,kBAAChB,EAAA,EAAD,CAAWgD,UAAU,SAASxC,MAAO,CAAEC,UAAW,QAChD,kBAACwC,EAAA,EAAD,KACE,kBAAC,EAAD,MAECb,GACC,kBAAC1B,EAAA,EAAD,CAAQG,MAAM,MAAMd,KAAK,SAAzB,8BAKF,kBAAC,EAAD,CAAQO,cAAeyC,KAAKV,aAAc9B,QAASA,IAElD4B,GAAe,kBAAC,EAAD,CAAenB,SAAUA,U,GAlDjCkC,aCIEC,QACW,cAA7BC,OAAOpC,SAASqC,UAEe,UAA7BD,OAAOpC,SAASqC,UAEhBD,OAAOpC,SAASqC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAc/B,MAAMgC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5a945041.chunk.js","sourcesContent":["export const IPDATA_KEY = \"89ecfb391d71ca51aa68bf26c20520aebcc747cac3c9a9f322c20553\"\r\n\r\nexport const GOOGLE_API_KEY = \"AIzaSyCdQymwSuF0P6Ee-ffX0ZtWjpJdpaT5eLk\"","import React from \"react\";\r\nimport { Menu, Container } from \"semantic-ui-react\";\r\nimport \"./NavBar.css\";\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <Menu inverted fixed=\"top\" size=\"massive\">\r\n      <Container>\r\n        <Menu.Item header>\r\n          <img src=\"assets/icon.png\" alt=\"logo\" />\r\n          IP LOCATION\r\n        </Menu.Item>\r\n      </Container>\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport { Header, Button } from \"semantic-ui-react\";\r\n\r\nconst Search = ({ handleOnClick, loading }) => {\r\n  return (\r\n    <div style={{ marginTop: \"2em\" }}>\r\n      <Header style={{ marginBottom: \"2em\" }}>\r\n        CLICK ON THE BUTTON TO SHOW IP LOCATION\r\n      </Header>\r\n      <Button\r\n        color=\"green\"\r\n        size=\"big\"\r\n        onClick={() => handleOnClick()}\r\n        loading={loading}\r\n      >\r\n        SHOW\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport {GOOGLE_API_KEY} from '../config/config';\r\n\r\nconst Map = ({ location, handleOnLoad }) => {\r\n  return (\r\n    <iframe\r\n      width=\"90%\"\r\n      height=\"450\"\r\n      frameBorder=\"0\"\r\n      style={{ border: 0, marginTop: \"2em\" }}\r\n      // src={`https://www.google.com/maps/embed/v1/place?key=${process.env.REACT_APP_GOOGLE_API_KEY}\r\n      //           &q=${location.latitude},${location.longitude}`}   //hiding api key\r\n      src={`https://www.google.com/maps/embed/v1/place?key=${GOOGLE_API_KEY}\r\n          &q=${location.latitude},${location.longitude}`}\r\n      allowFullScreen\r\n      title=\"Location\"\r\n      onLoad={() => handleOnLoad(true)}\r\n    ></iframe>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React, { useState } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport Map from \"./Map\";\r\n\r\nconst SearchResults = ({ location }) => {\r\n  const [ready, setReady] = useState(false);\r\n\r\n  \r\n  return (\r\n    <div style={{ marginTop: \"2em\" }}>\r\n      {ready && (\r\n        <Header>{`LOCATION: ${location.city}, ${location.country}`}</Header>\r\n      )}\r\n      <Map location={location} handleOnLoad={setReady} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResults;\r\n","import React, { Component } from \"react\";\nimport { Container, Segment, Header } from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport { IPDATA_KEY } from \"../config/config\";\nimport NavBar from \"./navBar/NavBar\";\nimport Search from \"./Search\";\nimport SearchResults from \"./SearchResults\";\n\nclass App extends Component {\n  state = {\n    location: \"\",\n    showResults: false,\n    loading: false,\n    error: false\n  };\n\n  findLocation = async () => {\n    this.setState({ showResults: false, loading: true, error: false });\n    try {\n      let response = await axios.get(\n        // `https://api.ipdata.co?api-key=${process.env.REACT_APP_IPDATA_KEY}`  // hiding of the api key\n        `https://api.ipdata.co?api-key=${IPDATA_KEY}` //for test\n      );\n\n      let data = response.data;\n\n      this.setState({\n        location: {\n          latitude: data.latitude,\n          longitude: data.longitude,\n          city: data.city,\n          country: data.country_name\n        },\n        showResults: true,\n        loading: false\n      });\n    } catch (error) {\n      console.log(error.response);\n      this.setState({ showResults: false, loading: false, error: true });\n    }\n  };\n\n  render() {\n    const { error, showResults, loading, location } = this.state;\n\n    return (\n      <Container textAlign=\"center\" style={{ marginTop: \"6em\" }}>\n        <Segment>\n          <NavBar />\n\n          {error && (\n            <Header color=\"red\" size=\"large\">\n              OOPS! SOMETHING WENT WRONG\n            </Header>\n          )}\n\n          <Search handleOnClick={this.findLocation} loading={loading} />\n\n          {showResults && <SearchResults location={location} />}\n        </Segment>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}